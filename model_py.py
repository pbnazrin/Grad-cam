# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2BR-Wmwd_TcKHdH3MY2_ONa54Hk_wd3
"""

import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model

from google.colab import drive
drive.mount('/content/drive')

import sys
ROOT_DIR="/content/drive/MyDrive/Mtech_project/Nazrin_F4K_segmentation_Model1/Unet_segmentation"
sys.path.append(ROOT_DIR)

"""We import all the required libraries."""

from data_py import load_data, tf_dataset

import os
import numpy as np
import cv2
from glob import glob
import tensorflow as tf
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, CSVLogger, TensorBoard
from data_py import load_data, tf_dataset

def conv_block(x,num_filters):
  x=Conv2D(num_filters,(3,3),padding="same")(x)
  x=BatchNormalization()(x)
  x=Activation("relu")(x)

  x=Conv2D(num_filters,(3,3),padding="same")(x)
  x=BatchNormalization()(x)
  x=Activation("relu")(x)

  return x

"""conv_block is the core of the UNet architecture which consists of two 3×3 convolutions,each with their own batch normalization and a ReLU (Rectified Linear Unit) activation."""

def build_model():
  size = 96
  num_filters = [16, 32,48, 64]
  inputs = Input((size, size, 3))
  skip_x=[]
  x=inputs

  #Encoder
  for f in num_filters:
    x=conv_block(x,f)
    skip_x.append(x)
    x=MaxPool2D((2,2))(x)

  #Bridge
  x=conv_block(x,num_filters[-1])

  num_filters.reverse()
  skip_x.reverse()

  #Decoder
  for i,f in enumerate(num_filters):
    x=UpSampling2D((2,2))(x)
    xs=skip_x[i]
    x=Concatenate()([x,xs])
    x=conv_block(x,f)

  #Output
  x=Conv2D(1,(1,1),padding="same")(x)
  x=Activation('sigmoid')(x)

  return Model(inputs,x)

"""The build_model function is used to build the entire UNet architecture with the helps of TensorFlow library.

After the decoder part is complete, a 1×1 convolution with the sigmoid activation function is applied. This gives the final output in the form of a binary mask.
"""

if __name__ == "__main__":
  model=build_model()
  model.summary()